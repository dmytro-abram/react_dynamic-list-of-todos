{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","completedTodos","title","handleChange","event","target","name","value","setState","preparedTodoList","this","props","todos","onSelectedUser","filter","todo","completed","className","placeholder","onChange","includes","map","key","id","classNames","type","checked","readOnly","disabled","userId","selectedUserId","onClick","React","Component","request","url","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","users","getUsers","a","userFromServer","data","prevProps","email","phone","clearSelectedUser","App","getTodos","todoListFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e3a7dcf.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    completedTodos: 'All',\n    title: '',\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { todos, onSelectedUser } = this.props;\n    const { title, completedTodos } = this.state;\n    let preparedTodoList;\n\n    switch (completedTodos) {\n      case 'All':\n        preparedTodoList = todos;\n        break;\n      case 'Completed':\n        preparedTodoList = todos.filter(todo => todo.completed === true);\n        break;\n      case 'Active':\n        preparedTodoList = todos.filter(todo => todo.completed === false);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          name=\"title\"\n          placeholder=\"Enter todo title\"\n          value={title}\n          onChange={this.handleChange}\n        />\n\n        <select\n          name=\"completedTodos\"\n          value={completedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Completed</option>\n          <option>Active</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodoList\n              .filter(todo => todo.title\n                && (todo.title).includes(title))\n              .map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })\n                }\n                >\n                  <label>\n                    {todo.completed ? (\n                      <input type=\"checkbox\" checked readOnly />\n                    ) : (\n                      <input type=\"checkbox\" disabled />\n                    )}\n\n                    <p>{todo.title}</p>\n                  </label>\n                  <button\n                    className={classNames('button TodoList__user-button', {\n                      // eslint-disable-next-line\n                      'TodoList__user-button--selected': todo.userId === this.props.selectedUserId,\n                    })}\n                    type=\"button\"\n                    onClick={() => {\n                      onSelectedUser(todo.userId);\n                    }}\n                  >\n                    User #\n                    {todo.userId}\n                  </button>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  onSelectedUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { request } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    users: {},\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUsers();\n    }\n  }\n\n  getUsers = async() => {\n    const userFromServer = await request(`/users/${this.props.userId}`);\n\n    this.setState({\n      users: userFromServer.data,\n    });\n  }\n\n  render() {\n    const { id, name, email, phone } = this.state.users;\n    const { clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clearButton\"\n          onClick={() => clearSelectedUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { request } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.getTodos();\n  }\n\n  getTodos = async() => {\n    const todoListFromServer = await request('/todos');\n\n    this.setState({\n      todos: todoListFromServer.data,\n    });\n  }\n\n  onSelectedUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onSelectedUser={this.onSelectedUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}